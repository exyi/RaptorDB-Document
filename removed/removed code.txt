raptordb.cs--------------------------------------------------------------------------------------------------------------------------
        //private bool GetDocID(object data, out Guid docid)
        //{
        //    docid = Guid.Empty;
        //    Type t = data.GetType();
        //    string propname = "";
        //    if (_docIDProperty.TryGetValue(t, out propname) == false)
        //    {
        //        // type not found try all subclasses
        //        foreach (var p in _docIDProperty)
        //        {
        //            if (t.IsSubclassOf(p.Key) && p.Key != typeof(object))
        //            {
        //                // add type to dictionary for later
        //                _docIDProperty.Add(t, p.Value);
        //                propname = p.Value;
        //                break;
        //            }
        //        }
        //        if (propname == "")
        //            return false;
        //    }

        //    var props = fastJSON.JSON.Instance.Getproperties(t, fastJSON.JSON.Instance.GetTypeAssemblyName(t));
        //    fastJSON.JSON.myPropInfo mpi;
        //    if (props.TryGetValue(propname, out mpi) == true)
        //    {
        //        docid = (Guid)mpi.getter(data);
        //        return true;
        //    }
        //    return false;
        //}

	    //public void SetDocumentIDProperty(Type type, string IDproperty)
        //{
        //    _docIDProperty.Add(type, IDproperty);
        //}

        //public void CompactView(string viewname)
        //{

        //}

        //public void RebuildView(string viewname)
        //{

        //}




view.cs-------------------------------------------------------------------------------------------------------------------------
//        /// <summary>
//        /// C# code generator for the DataList class
//        /// </summary>
//        /// <returns>string</returns>
//        public string GenerateDataList()
//        {
//            string str = @"
//public class {0}EmitList : EmitList
//{{
//    public void Emit(Guid docid, {1})
//    {{
//        object[] row = new object[{2}];
//        row[0] = docid;
//{3}        
//        Data.Add(row);
//    }}
//}}
//";
//            StringBuilder rows = new StringBuilder();
//            int i = 1;
//            foreach (var s in SchemaColumns.Columns)
//            {
//                rows.AppendLine("\t\trow[" + i++ + "] = " + s.Key + ";");
//            }
//            StringBuilder columnlist = new StringBuilder();
//            bool prepend = false;
//            foreach (var s in SchemaColumns.Columns)
//            {
//                if (prepend) columnlist.Append(", ");
//                prepend = true;
//                columnlist.Append(ConvertDataType(s.Value) + " " + s.Key);
//            }
//            string n = Name;
//            if (n == null || n == "")
//                n = "unnamed";

//            return string.Format(str, n, columnlist.ToString(), (SchemaColumns.Columns.Count + 1).ToString(), rows.ToString());
//        }

        ///// <summary>
        ///// C# code generator for the ViewRow class
        ///// </summary>
        ///// <returns>string</returns>
        //public string GenerateViewRow()
        //{
        //    return "";//GenerateViewRow(this.SchemaColumns);
        //}

        //internal static string GenerateViewRow(ViewRowDefinition viewdef)
        //{
        //    StringBuilder sb = new StringBuilder();

        //    string temp = Properties.Resources.ViewRow;
        //    sb.Append(temp.Replace("%VIEWNAME%", viewdef.Name));
        //    int i = 0;
        //    foreach (var c in viewdef.Columns)
        //    {
        //        i++;
        //        string row = "\tpublic %value% %name% { get { return (%value%)d[%i%]; } set { d[%i%] = value; } }";
        //        sb.AppendLine(row.Replace("%name%", c.Key).Replace("%value%", ConvertDataType(c.Value)).Replace("%i%", i.ToString()));
        //    }
        //    sb.Append("}");

        //    return sb.ToString();
        //}

		        //private static string ConvertDataType(Type dt)
        //{
        //    string str = "int";
        //    str = dt.ToString();
        //    return str;
        //}

		    //public enum DataTypes
    //{
    //    Boolean,
    //    Int,
    //    DateTime,
    //    Long,
    //    Byte,
    //    Short,
    //    Guid,
    //    String,
    //    Decimal,
    //    Float
    //}


viewhandler.cs -----------------------------------------------------------------------------------------------------------------
        //private Type GetType(Type dataTypes)
        //{
        //    Type t = null;
        //    switch (dataTypes)
        //    {
        //        case DataTypes.Boolean: t = typeof(bool); break;
        //        case DataTypes.Byte: t = typeof(byte); break;
        //        case DataTypes.DateTime: t = typeof(DateTime); break;
        //        case DataTypes.Guid: t = typeof(Guid); break;
        //        case DataTypes.Int: t = typeof(int); break;
        //        case DataTypes.Long: t = typeof(long); break;
        //        case DataTypes.Short: t = typeof(short); break;
        //        case DataTypes.String: t = typeof(string); break;
        //        case DataTypes.Decimal: t = typeof(decimal); break;
        //        case DataTypes.Float: t = typeof(float); break;
        //    }

        //    return t;
        //}

        //private byte[] GenerateRowBytes(object[] data)
        //{
        //    MemoryStream ms = new MemoryStream();
        //    BinaryWriter bw = new BinaryWriter(ms, Encoding.Unicode);
        //    // write null value bitmap
        //    BitArray ba = new BitArray(data.Length);
        //    for (int i = 1; i < data.Length; i++)
        //        if (data[i] == null) ba.Set(i - 1, true);

        //    byte[] nulls = new byte[data.Length / 8 + 1];
        //    ba.CopyTo(nulls, 0);
        //    bw.Write(nulls);

        //    foreach (object o in data)
        //    {
        //        if (o != null)
        //        {
        //            if (o is bool) bw.Write((bool)o);
        //            else if (o is int) bw.Write((int)o);
        //            else if (o is Guid) bw.Write(((Guid)o).ToByteArray());
        //            else if (o is long) bw.Write((long)o);
        //            else if (o is DateTime) bw.Write(((DateTime)o).ToBinary());
        //            else if (o is string) bw.Write((string)o);
        //            else if (o is byte) bw.Write((byte)o);
        //            else if (o is short) bw.Write((short)o);
        //            else if (o is double) bw.Write((double)o);
        //            else if (o is decimal) bw.Write((decimal)o);
        //            else if (o is float) bw.Write((float)o);
        //        }
        //    }

        //    return ms.ToArray();
        //}

        //private void Test()
        //{
        //    byte[] b = GenerateRowBytes(new object[] { 1, null, null, "asdasdasd asdAS" });

        //    object[] cols = ReadRowFromBytes(new Type[] { typeof(int), typeof(bool), typeof(long), typeof(string) }, b);
        //    int i = cols.Length;
        //}

        //private object[] ReadRowFromBytes(Type[] schema, byte[] bytes)
        //{
        //    MemoryStream ms = new MemoryStream(bytes);
        //    BinaryReader br = new BinaryReader(ms, Encoding.Unicode);
        //    byte[] nulls = new byte[schema.Length / 8 + 1];
        //    List<object> obj = new List<object>(10);
        //    br.Read(nulls, 0, schema.Length / 8 + 1);
        //    BitArray ba = new BitArray(nulls);

        //    // first is the docID
        //    obj.Add(new Guid(br.ReadBytes(16)));

        //    for (int i = 0; i < schema.Length; i++)
        //    {
        //        if (ba.Get(i) == false)
        //        {
        //            Type o = schema[i];
        //            if (o == typeof(bool)) obj.Add(br.ReadBoolean());
        //            else if (o == typeof(int)) obj.Add(br.ReadInt32());
        //            else if (o == typeof(Guid)) obj.Add(new Guid(br.ReadBytes(16)));
        //            else if (o == typeof(long)) obj.Add(br.ReadInt64());
        //            else if (o == typeof(DateTime)) obj.Add(DateTime.FromBinary(br.ReadInt64()));
        //            else if (o == typeof(string)) obj.Add(br.ReadString());
        //            else if (o == typeof(byte)) obj.Add(br.ReadByte());
        //            else if (o == typeof(short)) obj.Add(br.ReadInt16());
        //            else if (o == typeof(double)) obj.Add(br.ReadDouble());
        //            else if (o == typeof(decimal)) obj.Add(br.ReadDecimal());
        //            else if (o == typeof(float)) obj.Add(br.ReadSingle());
        //        }
        //        else
        //            obj.Add(null);
        //    }

        //    return obj.ToArray();
        //}